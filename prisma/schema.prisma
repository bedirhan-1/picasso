// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  surname         String?
  email           String    @unique
  hashedPassword  String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  policies        Policy[]
}

model Policy {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  policyNumber    String    @unique
  type            String
  startDate       DateTime
  endDate         DateTime
  premium         Float
  userId          String    @map("_userId") @db.ObjectId
  user            User      @relation(fields: [userId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  claims          Claim[]
}

model Claim {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  claimNumber     String    @unique
  policyId        String    @map("_policyId") @db.ObjectId
  policy          Policy    @relation(fields: [policyId], references: [id])
  description     String
  status          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}
// Peki burda açılmayan dersleri diğer üniversiteden alsam kabul eder misiniz?

// Policy (Poliçe) Modeli:

// id: Poliçe kimliği. Otomatik olarak oluşturulan benzersiz bir değerdir.
// policyNumber: Poliçe numarası. Bu alanın benzersiz olması gerekmektedir.
// type: Poliçe türü. Örneğin, sağlık sigortası, araç sigortası gibi.
// startDate: Poliçenin başlangıç tarihi.
// endDate: Poliçenin bitiş tarihi.
// premium: Poliçe prim miktarı.
// userId: İlgili poliçeyi keşfeden kullanıcının kimliği.
// user: Kullanıcı ile User modeli arasındaki ilişkiyi temsil eder. Bir kullanıcı birden fazla
// poliçeye sahip olabilir.
// createdAt: Poliçenin oluşturulduğu tarih.
// updatedAt: Poliçenin son güncellenme tarihi.


// Claim (Hasar Talebi) Modeli:

// id: Hasar talebi kimliği. Otomatik olarak oluşturulan benzersiz bir değerdir.
// claimNumber: Hasar talebi numarası. Bu alanın benzersiz olması gerekmektedir.
// policyId: İlgili hasar talebinin ait olduğu poliçenin kimliği.
// policy: Hasar talebi ile Policy modeli arasındaki ilişkiyi temsil eder. Bir poliçe birden fazla 
// hasar talebine sahip olabilir. description: Hasar talebi açıklaması.
// status: Hasar talebinin durumu.
// createdAt: Hasar talebinin oluşturulduğu tarih.
// updatedAt: Hasar talebinin son güncellenme tarihi.
// User modeline yapılan değişiklik, bir kullanıcının birden fazla poliçeye ve hasar talebine sahip 
// olabilmesini sağlar.  Policy ve Claim modelleri, kullanıcılar, poliçeler ve hasar talepleri 
// arasındaki ilişkileri temsil eder.

// Bu modelleri kullanarak kullanıcıların poliçe kestikleri ve hasar taleplerinde bulundukları takip 
// edilebilir. Her bir poliçe ve hasar talebi, ilgili kullanıcının veya poliçenin kimliği aracılığıyla
// diğer modellerle ilişkilendirilmiştir.